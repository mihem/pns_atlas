---
title: "Reproducing the figures of the manuscript"
format: 
    html:
        embed-resources: true
execute:
    cache: true
---

## Load libraries

```{r}
#| output: false
library(qs)
library(Seurat)
library(tidyverse)
library(miloDE)
library(sessioninfo)
library(EnhancedVolcano)
library(pals)
library(scMisc)
```


## Figure 1

**UMAP of all cells (Figure 1B)**
```{r}
options(timeout = 3600)
if (!file.exists("umap_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "umap_figure.qs"
    )
}
umap_figure <- qread("umap_figure.qs")
DimPlot(
    umap_figure,
    reduction = "umap.scvi.full",
    pt.size = .1,
    alpha = .1,
    cols = umap_figure@misc$cluster_col,
    label = TRUE,
    raster = FALSE
) +
    NoLegend() +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) +
    xlab("UMAP_1") +
    ylab("UMAP_2")
```

## Figure 2

**UMAP immune cells (Figure 2A)**

```{r}
if (!file.exists("ic_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "ic_figure.qs"
    )
}
ic_figure <- qread("ic_figure.qs")
DimPlot(
    ic_figure,
    reduction = "umap.rpca",
    pt.size = .1,
    alpha = .3,
    cols = ic_figure@misc$ic_cluster_col,
    label = TRUE,
    raster = FALSE
) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) +
    NoLegend() +
    xlab("UMAP1") +
    ylab("UMAP2")
```

**Feature plots immune cells (Figure 2B)**

```{r}
FeaturePlot(
    ic_figure,
    features = c("MS4A7", "CX3CR1", "TREM2", "LYVE1", "FOLR2", "TIMD4"),
    reduction = "umap.rpca",
    pt.size = 0.1,
    raster = FALSE,
    coord.fixed = TRUE,
    cols = c("#F0F0F0", "#CB181D"),
    order = TRUE,
    ncol = 3
) &
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) &
    xlab("UMAP1") &
    ylab("UMAP2")

```

**Enrichment of gene ontology terms in markers genes of Macro 18 (Figure 2C)**

```{r}
#| fig-height: 3
if (!file.exists("enrichr_macro18.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "b_plasma_figure.qs"
    )
}
enrichr_macro18 <- qread("enrichr_macro18.qs")
enrichr_macro18 |>
    dplyr::slice_min(order_by = Adjusted.P.value, n = 10, with_ties = FALSE) |>
    tidyr::separate(Overlap, into = c("overlap1", "overlap2")) |> # separate overlap in two columns
    dplyr::mutate(Term = gsub(x = Term, pattern = "\\s\\(.+\\)", replacement = "")) |>
    dplyr::mutate(overlap = as.numeric(overlap1) / as.numeric(overlap2)) |> # calculcate overlap
    ggplot(aes(y = reorder(Term, -log10(Adjusted.P.value)), x = -log10(Adjusted.P.value))) +
    geom_col(fill = scales::hue_pal()(5)[1]) +
    labs(
        x = "-Log10 Adjusted P value",
        y = ""
    ) +
    theme_classic() +
    theme(legend.position = "none")
```

**Dot plot IGH chain genes (Figure 2E)**
```{r}
if (!file.exists("ic_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "b_plasma_figure.qs"
    )
}
b_plasma_figure <- qread("b_plasma_figure.qs")
DotPlot(
    b_plasma_figure,
    features = c("IGHM", "IGHD", "IGHG1", "IGHG2", "IGHG3", "IGHG4", "IGHA1", "IGHA2"),
    scale = FALSE,
    dot.scale = 10
) +
    viridis::scale_color_viridis(option = "viridis") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, face = "italic")) +
    xlab("") +
    ylab("")
```

## Figure 3

**Propeller abundance PNP vs CTRL (Figure 3A)**
```{r}
#| fig-width: 3
#| fig-height: 3
if (!file.exists("propeller_PNP_CTRL.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "propeller_PNP_CTRL.qs"
    )
}
if (!file.exists("propeller_PNP_CTRL.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "propeller_PNP_CTRL_ic.qs"
    )
}
propeller_PNP_CTRL <- qread("propeller_PNP_CTRL.qs")
propeller_PNP_CTRL_ic <- qread("propeller_PNP_CTRL_ic.qs")

# function to plot custom dotplot
dotplotPropeller <- function(data, color, title) {
    ggplot(data, aes(x = log2ratio, y = fct_reorder(cluster, log2ratio), color = cluster)) +
        geom_point(size = 5) +
        theme_classic() +
        geom_vline(
            xintercept = 0, color = "red",
            linetype = "solid"
        ) +
        scale_color_manual(values = color) +
        xlab("Log2 fold change") +
        ylab(NULL) +
        theme(legend.position = "none") + 
        ggtitle(title)
}
dotplotPropeller(propeller_PNP_CTRL, color = umap_figure@misc$cluster_col, title = "PNP vs CTRL main clusters")
dotplotPropeller(propeller_PNP_CTRL_ic, color = ic_figure@misc$ic_cluster_col, title = "PNP vs CTRL immune cells")
```

**Covarying Neighborhood Analysis (Figure 3B)**

```{r}
if (!file.exists("cna_pnp_gratio_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "cna_pnp_gratio_figure.qs"
    )
}
if (!file.exists("cna_incat_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "cna_incat_figure.qs"
    )
}
cna_pnp_gratio_figure <- qread("cna_pnp_gratio_figure.qs")
cna_incat_figure <- qread("cna_incat_figure.qs")

# function to plot CNA feature plot
fplotCNA <-  function(object, feature, title) {
    FeaturePlot(
        object,
        reduction = "umap.scvi.full",
        features = feature,
        pt.size = 0.1,
        order = FALSE,
        coord.fixed = TRUE,
        raster = FALSE,
        alpha = 0.2
    ) +
    scale_colour_gradient2(
        low = "#2166AC",
        mid = "white",
        high = "#B2182B",
        midpoint = 0,
    ) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank(),
    ) +
    labs(
        title = title, color = "Correlation", x = "UMAP1", y= "UMAP2"
    )
}

fplotCNA(cna_pnp_gratio_figure, "cna_ncorrs_pnp", title = "PNP")
fplotCNA(cna_incat_figure, "cna_ncorrs", title = "INCAT")
fplotCNA(cna_pnp_gratio_figure, "cna_ncorrs_gratio", title = "g-ratio")
``` 

**Number of DEGs (Figure 3C)**

```{r}
if (!file.exists("pnp_ctrl_pseudobulk_de.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "pnp_ctrl_pseudobulk_de.qs"
    )
}
pnp_ctrl_pseudobulk <- qread("pnp_ctrl_pseudobulk_de.qs")
pnp_ctrl_pseudobulk |>
    mutate(cluster = fct_reorder(cluster, n)) |>
    ggplot(aes(x = cluster, y = n, fill = cluster)) +
    geom_col() +
    coord_flip() +
    scale_fill_manual(values = umap_figure@misc$cluster_col) +
    theme_classic() +
    theme(legend.position = "none") +
    labs(
        x = "",
        y = "",
        title = "PNP vs CTRL"
    )
```

**MiloDE DEGs PNP vs CTRL (Figure 3D)**

```{r}
#| fig-width: 5
if (!file.exists("milo_figure.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "milo_figure.qs"
    )
}

milo_figure <- qread("milo_figure.qs")
plotMiloDE <- function(condition, title) {
    plot <- 
    plot_milo_by_single_metric(
        milo_figure$obj,
        milo_figure$stat[[condition]],
        colour_by = "n_DE_genes",
        layout = "UMAP.SCVI.FULL",
        size_range = c(0.5, 5),
        edge_width = c(0.1, 1.0),
        edge_weight.thres = 10
    ) +
    viridis::scale_fill_viridis(name = "# DE genes", option = "inferno") +
    ggtitle(title)
    print(plot)
}

plotMiloDE("pnp", "PNP vs CTRL")
```

**Pseudobulk DE PNP vs CTRL (Figure 3E)**
```{r}
if (!file.exists("de_pseudo_pnp_ctrl.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "de_pseudo_pnp_ctrl.qs"
    )
}
de_pseudo_pnp_ctrl <- qread("de_pseudo_pnp_ctrl.qs")

# volcano plot function
volcanoPlot <- function(cluster, input, FCcutoff = 2, selectLab = NULL, drawConnectors = TRUE, condition1, condition2) {
    input <- input[[cluster]]
    volcano <- EnhancedVolcano::EnhancedVolcano(
        data.frame(input),
        lab = paste0("italic('", input[["gene"]], "')"),
        x = "avg_logFC",
        y = "p_val_adj",
        xlim = c(min(input[["avg_logFC"]], max(input[["avg_logFC"]]))),
        ylim = c(0, max(-log10(input[["p_val_adj"]]))),
        pCutoff = 0.1,
        FCcutoff = FCcutoff,
        axisLabSize = 15,
        pointSize = 2,
        labSize = 5,
        subtitle = NULL,
        caption = NULL,
        border = "full",
        gridlines.major = FALSE,
        gridlines.minor = FALSE,
        drawConnectors = drawConnectors,
        lengthConnectors = unit(0.0001, "npc"),
        title = paste(condition1, "vs", condition2, "in ", cluster),
        boxedLabels = TRUE,
        selectLab = selectLab,
        xlab = bquote(~ Log[2] ~ "fold change"),
        ylab = bquote(~ -Log[10] ~ "adjusted p-value"),
        parseLabels = TRUE,
        legendLabels = c(
            "NS", "logFC",
            "p-val", "p-val + logFC"
        ),
        legendPosition = "right",
    )
}

# define clusters of interest
cluster_de <- c("mySC", "nmSC", "repairSC", "PC2")

# define genes of interests
lab_pnp_ctrl <- list(
    "mySC" = paste0("italic('", c("DCN", "TNXB", "COL1A1", "COL15A1", "CD53", "IL4R", "CD74"), "')"),
    "nmSC" = paste0("italic('", c("IL10RA", "IL13RA1", "CSF2RA", "TGFBI"), "')"),
    "repairSC" = paste0("italic('", c("GALR1", "TMEM47"), "')"),
    "PC2" = paste0("italic('", c("MFAP5", "NLGN4Y", "PCDH11Y", "IFIT3", "OASL", "MX1"), "')")
)

# plot volcano plots of selected clusters
purrr::walk(
    cluster_de,
    function(cluster) {
        print(volcanoPlot(
            cluster = cluster,
            input = de_pseudo_pnp_ctrl,
            FCcutoff = 2,
            condition1 = "PNP",
            condition2 = "CTRL",
            selectLab = lab_pnp_ctrl[[cluster]]
        ))
    }
)
```

## Figure 4

**Abundance of clusters per PNP subtype (Figure 4A)**

```{r}
#| fig-width: 4
if (!file.exists("abundance_main_clusters.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "abundanance_main_clusters.qs"
    )
}
abundance_main_clusters <- qread("abundance_main_clusters.qs")

abundance_main_clusters |>
    ggplot() +
    geom_col(
        aes(x = type, y = count, fill = cell),
        color = "black",
        linewidth = 0.1,
        position = "fill"
    ) +
    scale_fill_manual(values = umap_figure@misc$cluster_col) +
    guides(fill = guide_legend(title = NULL)) +
    theme_classic() +
    ylab("Proportion of cells") +
    xlab("") +
    theme(axis.text.x = element_text(
        angle = 90,
        hjust = 1, vjust = 0.3
    ))
```

**Propeller abundance of PNP subtypes main cluster (Figure 4B)**

```{r}
#| fig-width: 3
#| fig-height: 3
if (!file.exists("propeller_PNP_subtypes_main.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "propeller_PNP_subtypes_main.qs"
    )
}

propeller_PNP_subtypes_main <- qread("propeller_PNP_subtypes_main.qs")
purrr::walk(
    c("VN", "CIDP", "CIAP"),
    function(condition) {
        print(dotplotPropeller(
            propeller_PNP_subtypes_main[[condition]],
            color = umap_figure@misc$cluster_col,
            title = paste0("CTRL vs ", condition, " main")
        ))
    }
)


```

**Propeller abundance of PNP subtypes immune cluster (Figure 4C)**
```{r}
#| fig-width: 3
#| fig-height: 3
if (!file.exists("propeller_PNP_subtypes_ic.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "propeller_PNP_subtypes_ic.qs"
    )
}
propeller_PNP_subtypes_ic <- qread("propeller_PNP_subtypes_ic.qs")
purrr::walk(
    c("VN", "CIDP", "CIAP"),
    function(condition) {
        print(dotplotPropeller(
            propeller_PNP_subtypes_ic[[condition]],
            color = umap_figure@misc$cluster_col,
            title = paste0("CTRL vs ", condition, " immune")
        ))
    }
)
```

**Manual PTPRC quantif (Figure 4F)**

```{r}
#| fig-width: 3
#| fig-height: 3
if (!file.exists("manual_xenium_quantification.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "manual_xenium_quantification.qs"
    )
}

manual_xenium_quantification <- qread("manual_xenium_quantification.qs")
plotQuanti <- function(y_value, title) {
    plot <- 
    manual_xenium_quantification |>
        ggplot(aes(x = level2, y = .data[[y_value]], fill = level2)) +
        geom_boxplot() +
        geom_jitter(height = 0, width = 0.1) +
        scale_fill_manual(values = umap_figure@misc$level2_cols) +
        guides(fill = guide_legend(title = NULL)) +
        theme_classic() +
        xlab("") +
        ylab("PTPRC density") +
        ggtitle(title) +
        theme(
            legend.position = "none",
            axis.text.x = element_text(
                angle = 90,
                hjust = 1,
                vjust = 0.3,
            )
        )
        print(plot)
}

purrr::walk2(
    c("endoPTPRC_density_sum", "epiPTPRC_density"),
    c("endoneurial", "epineurial"),  
    function(y_value, title) {
        plotQuanti(y_value = y_value, title = title)
    }
)
```

**MiloDE DEGs PNP subtypes(Figure 4G)**

```{r}
#| fig-width: 5
purrr::walk2(
    c("vn", "cidp", "ciap"),
    c("VN vs CTRL", "CIDP vs CTRL", "CIAP vs CTRL"),
    function(condition, title) {
        plotMiloDE(condition, title)
    }
)
```

## Supplementary Figure 1

**Demographics plot (Figure S1A)**

```{r}
#| fig-width: 3
#| fig-height: 3
if (!file.exists("demographics.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "demographics.qs"
    )
}

demographics <- qread("demographics.qs")

plotDemographics <- function(var) {
    plot <- demographics |>
        dplyr::filter(!is.na(.data[[var]])) |>
        ggplot(aes(x = level2, y = .data[[var]], fill = level2)) +
        geom_boxplot() +
        geom_point() +
        theme_bw() +
        scale_fill_manual(values = umap_figure@misc$level2_cols) +
        xlab("") +
        ylab("") +
        ggtitle(var) +
        theme(legend.position = "none")
    print(plot)
}

purrr::walk(c("age", "ncv_tibial_motoric", "incat"), plotDemographics)

```

```{r}
#| fig-width: 4
#| fig-height: 3
demographics |>
    ggplot(aes(x = level2, fill = sex)) +
    geom_bar() + 
    theme_bw() +
    scale_fill_manual(values = pals::cols25(2)) +
    xlab("") +
    ylab("") +
    ggtitle("sex")
```

**UMAP grouped by center and sample (Figure S1C)**
```{r}
DimPlot(
    umap_figure,
    reduction = "umap.scvi.full",
    pt.size = .1,
    raster = FALSE,
    alpha = 0.1,
    group.by = "center",
    cols = pals::cols25(3),
    label = FALSE
) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) +
    xlab("UMAP_1") +
    ylab("UMAP_2")


my_cols_50 <- unname(Polychrome::createPalette(50, pals::cols25()))

DimPlot(
    umap_figure,
    reduction = "umap.scvi.full",
    pt.size = .1,
    raster = FALSE,
    alpha = 0.1,
    group.by = "sample",
    cols = umap_figure@misc$sample_cols,
    label = FALSE
) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) +
    xlab("UMAP_1") +
    ylab("UMAP_2")

```

**Number of genes per nucleus (Figure S1D)**
```{r}
count_genes <- dplyr::tibble(
    feature = umap_figure@meta.data$nFeature_RNA,
    sample = umap_figure@meta.data$sample
)

count_genes |>
    ggplot(aes(x = sample, y = feature, fill = sample)) +
    geom_boxplot() +
    scale_fill_manual(values = umap_figure@misc$sample_cols) +
    theme_classic() +
    theme(legend.position = "none") +
    xlab("") +
    ylab("") +
    ggtitle("Number of genes per nucleus") +
    theme(axis.text.x = element_text(angle = 90))
```

**Abundance of clusters per sample (Figure S1E)**
```{r}
if (!file.exists("abundance_main_clusters_sample.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "abundanance_main_clusters_sample.qs"
    )
}
abundance_main_clusters_sample <- qread("abundance_main_clusters_sample.qs")
abundance_main_clusters_sample |>
    mutate(type = factor(type, levels = rev(levels(factor(type))))) |>
    ggplot() +
    geom_col(
        aes(x = type, y = count, fill = cell),
        color = "black",
        linewidth = 0.1,
        position = "fill"
    ) +
    scale_fill_manual(values = umap_figure@misc$cluster_col) +
    theme_classic() +
    ylab("Proportion of cells") +
    xlab("") +
    theme(
        axis.text.x = element_text(
            angle = 90,
            hjust = 1, vjust = 0.3
        ),
        legend.position = "none"
    ) +
    coord_flip()
```

## Supplementary Figure 2

**Dotplot of main clusters(Figure S2A)**

```{r}
if (!file.exists("dotplot_data.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "abundance_main_clusters_sample.qs"
    )
}
dotplot_data <- qread("dotplot_data.qs")

# Seurat DotPlot function (only ggplot part to avoid calculations)
DotPlotModified <- function(
  data.plot,
  cols = c("lightgrey", "blue"),
  dot.scale = 6,
  scale.by = 'radius',
  scale.min = NA,
  scale.max = NA
) {
  scale.func <- switch(
    EXPR = scale.by,
    'size' = scale_size,
    'radius' = scale_radius,
    stop("'scale.by' must be either 'size' or 'radius'")
  )
  color.by <- 'avg.exp.scaled'
  plot <- ggplot(data = data.plot, mapping = aes_string(x = 'features.plot', y = 'id')) +
    geom_point(mapping = aes_string(size = 'pct.exp', color = color.by)) +
    scale.func(range = c(0, dot.scale), limits = c(scale.min, scale.max)) +
    theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
    guides(size = guide_legend(title = 'Percent Expressed')) + 
    cowplot::theme_cowplot()
  plot <- plot + guides(color = guide_colorbar(title = 'Average Expression'))
  return(plot)
}

DotPlotModified(
    data.plot = dotplot_data,
    scale.by = "size"
) +
    viridis::scale_color_viridis(option = "viridis") +
    theme(axis.text.x = element_text(
        angle = 90,
        vjust = 0.5,
        hjust = 1,
        face = "italic",
        size = 7
        ),
        legend.position = "top",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 10)
        ) +
    xlab("") +
    ylab("")
```

**Enrichment of gene ontology terms of markers genes in periC (Figure S2B)**
```{r}
#| fig-height: 3
if (!file.exists("enrichr_periC.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "enrichr_periC.qs"
    )
}
enrichr_periC <- qread("enrichr_periC.qs")

plotEnrichr <- function(data, name) {
    plot <- 
    data |>
        dplyr::slice_min(order_by = Adjusted.P.value, n = 10, with_ties = FALSE) |>
        tidyr::separate(Overlap, into = c("overlap1", "overlap2")) |> 
        dplyr::mutate(Term = gsub(x = Term, pattern = "\\s\\(.+\\)", replacement = "")) |>
        dplyr::mutate(overlap = as.numeric(overlap1) / as.numeric(overlap2)) |>
        ggplot(aes(y = reorder(Term, -log10(Adjusted.P.value)), x = -log10(Adjusted.P.value))) +
        geom_col(fill = scales::hue_pal()(5)[1]) +
        labs(
            x = "-Log10 Adjusted P value",
            y = ""
        ) +
        theme_classic() +
        theme(legend.position = "none") +
        ggtitle(name)
    print(plot)
}

purrr::walk2(
    enrichr_periC,
    names(enrichr_periC),
    plotEnrichr
)
```

```{r}
#| fig-width: 4
#| fig-height: 4
plotUMAP <- function(group, title) {
    plot <- 
    DimPlot(
        umap_figure,
        reduction = "umap.scvi.full",
        group.by = group,
        raster = FALSE,
        pt.size = .1,
        alpha = .1,
        cols = umap_figure@misc$sample_cols,
        label = TRUE
    ) +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    ) +
    xlab("UMAP_1") +
    ylab("UMAP_2") +
    NoLegend() + 
    ggtitle(title)
    print(plot)
}

purrr::walk2(
    c("milbrandt_sciatic_label_full", "suter_p60_label_full"),
    c("Yim et al. sciatic nerve", "Gerber et al. p60"),
    plotUMAP
)
```

```{r}
#| fig-width: 4
#| fig-height: 4
if (!file.exists("ec_rosmap.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "ec_rosmap.qd"
    )
}
ec_rosmap <- qread("ec_rosmap.qs")
DimPlot(
    ec_rosmap,
    reduction = "umap.scvi.full",
    group.by = "rosmap_label",
    raster = FALSE,
    pt.size = .1,
    alpha = .1,
    cols = ec_rosmap@misc$sample_cols,
    label = TRUE
) +
    NoLegend() +
    xlim(-12, -5) +
    ylim(2, 10) +
    xlab("UMAP_1") +
    ylab("UMAP_2") +
    ggtitle("ROSMAP vascular cells") +
    theme(
        axis.text = element_blank(),
        axis.ticks = element_blank()
    )
```

**Dotplot of new marker genes in rodent and human datasets (Figure S2D)**

```{r}
#| fig-width: 5
#| fig-height: 4
if (!file.exists("dotplot_human_rodent.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "dotplot_human_rodent.qs"
    )
}
dotplot_human_rodent <- qread("dotplot_human_rodent.qs")

DotPlotCustom <-
    function(data, title) {
        plot <-
            DotPlotModified(
                data.plot = data,
                scale.by = "size",
                dot.scale = 10,
            ) +
            viridis::scale_color_viridis(option = "viridis") +
            theme(axis.text.x = element_text(
                angle = 90,
                vjust = 0.5,
                hjust = 1,
                face = "italic",
            )) +
            xlab("") +
            ylab("") +
            ggtitle(title)
        print(plot)
    }

purrr::walk2(
    dotplot_human_rodent,
    c("rodent(Yim et al.)", "human (this study)"),
    DotPlotCustom
)
```

## Supplementary Figure 4
**Dotplot of immune cell marker genes (Figure S4A)**

```{r}
#| fig-height: 7
if (!file.exists("dotplot_data_ic.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "dotplot_data_ic.qs"
    )
}

dotplot_data_ic <- qread("dotplot_data_ic.qs")

DotPlotModified(
    data.plot = dotplot_data_ic,
    scale.by = "size"
) +
    viridis::scale_color_viridis(option = "viridis") +
    theme(axis.text.x = element_text(
        angle = 90,
        vjust = 0.5,
        hjust = 1,
        face = "italic",
        size = 7
        ),
        legend.position = "top",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 10)
        ) +
    xlab("") +
    ylab("")
```

**Enrichment of gene ontology terms in DEG (Figure S4B)**

```{r}
#| fig-height: 3
if (!file.exists("enrichr_de.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "enrichr_de.qs"
    )
}

enrichr_de <- qread("enrichr_de.qs")

purrr::walk2(
    enrichr_de$pos,
    paste0(names(enrichr_de$pos), " upregulated in PNP"),
    plotEnrichr
)

purrr::walk2(
    enrichr_de$neg,
    paste0(names(enrichr_de$neg), " downregulated in PNP"),
    plotEnrichr
)

```

# Supplementary Figure 5

**Boxplots of g-ratio per sample (Figure S5B)**
```{r}
#| fig-height: 3
if (!file.exists("g_ratio.qs")) {
    download.file(
        "https://zenodo.org/records/14226219/files/umap_figure.qs?download=1",
        "g_ratio.qs"
    )
}
g_ratio <- qread("g_ratio.qs")

g_ratio |>
    ggplot(aes(x = sample, y = g_ratio)) +
    geom_boxplot() +
    geom_jitter(height = 0, width = 0.1, alpha = 0.3, size = 0.1) +
    theme_bw() + 
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
    xlab("g-ratio") + 
    ylab("")
```

**Boxplots of g-ratio per PNP subtye (Figure S5B)**

```{r}
#| fig-height: 3
#| fig-width: 3
g_ratio |>
    group_by(sample) |>
    mutate(g_ratio = mean(g_ratio)) |>
    select(sample, level2, g_ratio) |>
    distinct() |>
    ggplot(aes(x = level2, y = g_ratio, fill = level2)) +
    geom_boxplot() +
    geom_jitter(height = 0, width = 0.1) +
    scale_fill_manual(values = umap_figure@misc$level2_cols) +
    theme_classic() +
    ylab("g-ratio") +
    xlab("") +
    theme(
        axis.text.x = element_text(
            angle = 90,
            hjust = 1,
            vjust = 0.3
        ),
        legend.position = "none"
    )

```

## Session info
```{r}
session_info()
```
